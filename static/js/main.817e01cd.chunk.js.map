{"version":3,"sources":["components/Movie.tsx","data/OMDBTypes.ts","components/Paginator.tsx","components/SearchBar.tsx","components/Banner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Poster","link","posterLink","alt","posterImage","className","src","width","viewBox","fill","xmlns","height","x","y","cx","cy","r","stroke","strokeWidth","Type","Movie","movieData","children","Title","Year","Paginator","currentPage","numPages","onChangePage","aria-label","onClick","_","aria-hidden","fillRule","d","clipRule","Array","keys","map","pageNumber","SearchBar","onEnter","useState","search","setSearch","type","id","name","value","placeholder","onChange","e","target","onKeyUp","a","key","Banner","display","API_KEY","title","page","axios","get","params","apikey","s","resp","data","undefined","App","setCurrentPage","nominees","setNominees","lastSearch","setLastSearch","isBannerVisible","setBannerVisibility","useEffect","length","movie","imdbID","window","location","reload","Search","disabled","findIndex","nominee","config","Math","round","totalResults","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.817e01cd.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Movie as MovieData } from '../data/OMDBTypes';\n\nexport interface MovieProps {\n    movieData: MovieData;\n}\n\ninterface PosterProps {\n    posterLink: string;\n    alt: string;\n}\n\n/**\n * Renders a Movie given its poster link, title, year and optionally additional components to add below it (e.g. a buttton). If the movie poster cannot be found simply enter 'N/A' a placeholder image will be used.\n *\n * @param posterLink link to movie poster\n * @param alt alternative text for accessibility\n * @returns\n */\nfunction Poster({ posterLink: link, alt }: PosterProps) {\n    let posterImage = <img className=\"object-cover\" src={link} alt={alt} />;\n\n    if (link === 'N/A') {\n        // Use placeholder image\n        posterImage = (\n            <svg width=\"100%\" viewBox=\"0 0 648 960\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"648\" height=\"960\" fill=\"#E5E5E5\" />\n                <rect x=\"195\" y=\"420\" width=\"257\" height=\"128\" fill=\"#C9C9C9\" />\n                <rect x=\"195\" y=\"389\" width=\"257\" height=\"20\" fill=\"#C9C9C9\" />\n                <rect x=\"209\" y=\"364\" width=\"44\" height=\"21\" fill=\"#C9C9C9\" />\n                <circle cx=\"351.5\" cy=\"484.5\" r=\"43.5\" fill=\"#C9C9C9\" stroke=\"#E5E5E5\" strokeWidth=\"14\" />\n            </svg>\n        );\n    }\n\n    return <div className=\"Poster flex-grow grid place-items-center m-4 w-full h-full aspect-w-11 aspect-h-16\">{posterImage}</div>;\n}\n\nexport const Movie: FunctionComponent<MovieProps> = ({ movieData, children }) => {\n    return (\n        <div className=\"Movie rounded-lg shadow-sm bg-white flex flex-col justify-center items-center p-4\">\n            <Poster posterLink={movieData.Poster} alt={movieData.Title + '-poster'} />\n            <h3 className=\"font-medium\">{movieData.Title}</h3>\n            <h4>{movieData.Year}</h4>\n            {children}\n        </div>\n    );\n};\n","export interface SearchResponse {\n    data: Data;\n    status: number;\n    statusText: string;\n    headers: Headers;\n    config: Config;\n    request: Request;\n}\n\nexport interface Config {\n    url: string;\n    method: string;\n    headers: ConfigHeaders;\n    params: Params;\n    transformRequest: null[];\n    transformResponse: null[];\n    timeout: number;\n    xsrfCookieName: string;\n    xsrfHeaderName: string;\n    maxContentLength: number;\n    maxBodyLength: number;\n}\n\nexport interface ConfigHeaders {\n    Accept: string;\n}\n\nexport interface Params {\n    apikey: string;\n    s: string;\n}\n\nexport interface Data {\n    Search: Movie[];\n    totalResults: string;\n    Response: string;\n}\n\nexport interface Movie {\n    Title: string;\n    Year: string;\n    imdbID: string;\n    Type: Type;\n    Poster: string;\n}\n\nexport enum Type {\n    Movie = 'movie',\n    Series = 'series',\n    Episode = 'episode',\n}\n\nexport interface Headers {\n    'cache-control': string;\n    'content-type': string;\n    expires: string;\n    'last-modified': string;\n}\n\nexport interface Request {}\n","import React from 'react';\n\nexport interface PaginatorProps {\n    currentPage: number;\n    numPages: number;\n    onChangePage: (page: number) => void;\n}\n\n// Adapted from https://tailwindui.com/components/application-ui/navigation/pagination\nexport function Paginator({ currentPage, numPages, onChangePage }: PaginatorProps) {\n    return (\n        <div className=\"m-4\">\n            <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n                {currentPage > 1 && (\n                    <div\n                        className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition-all cursor-pointer\"\n                        onClick={(_) => onChangePage(currentPage - 1)}\n                    >\n                        <span className=\"sr-only\">Previous</span>\n                        <svg\n                            className=\"h-5 w-5\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            aria-hidden=\"true\"\n                        >\n                            <path\n                                fillRule=\"evenodd\"\n                                d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\n                                clipRule=\"evenodd\"\n                            />\n                        </svg>\n                    </div>\n                )}\n\n                {[...Array(numPages).keys()]\n                    .map((pageNumber) => pageNumber + 1)\n                    .map((pageNumber) => (\n                        <div\n                            key={pageNumber}\n                            className={`relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium  hover:bg-gray-50 transition-all cursor-pointer ${\n                                pageNumber === currentPage ? 'font-bold text-gray-700' : 'text-gray-500'\n                            } ${pageNumber === currentPage && currentPage === 1 ? 'rounded-l-md' : ''} ${\n                                pageNumber === currentPage && currentPage === numPages ? 'rounded-r-md' : ''\n                            }`}\n                            onClick={(_) => onChangePage(pageNumber)}\n                        >\n                            {pageNumber}\n                        </div>\n                    ))}\n\n                {currentPage < numPages && (\n                    <div\n                        className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition-all cursor-pointer\"\n                        onClick={(_) => onChangePage(currentPage + 1)}\n                    >\n                        <span className=\"sr-only\">Next</span>\n                        <svg\n                            className=\"h-5 w-5\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            aria-hidden=\"true\"\n                        >\n                            <path\n                                fillRule=\"evenodd\"\n                                d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n                                clipRule=\"evenodd\"\n                            />\n                        </svg>\n                    </div>\n                )}\n            </nav>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\n\nexport interface SearchBarProps {\n    onEnter: (searchValue: string) => void;\n}\n\nexport function SearchBar({ onEnter }: SearchBarProps) {\n    const [search, setSearch] = useState('');\n\n    return (\n        <div className=\"SearchBar m-4\">\n            <input\n                type=\"text\"\n                id=\"search\"\n                name=\"search\"\n                className=\"rounded-lg p-4 border-gray-300 hover:shadow-md transition-all\"\n                value={search}\n                placeholder=\"Search movie title\"\n                onChange={(e) => setSearch(e.target.value)}\n                onKeyUp={async (e) => {\n                    if (e.key === 'Enter') {\n                        onEnter(search);\n                    }\n                }}\n            />\n        </div>\n    );\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface BannerProps {\n    display: boolean;\n}\n\nexport const Banner: FunctionComponent<BannerProps> = ({ display, children }) => {\n    return (\n        <div\n            className={`Banner fixed grid place-items-center z-10 w-full h-full transition-all ${\n                display ? '' : 'hidden'\n            } backdrop-filter backdrop-brightness-50`}\n        >\n            <div className=\"container sm bg-white rounded-lg shadow-lg mx-auto p-4\">{children}</div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Movie as MovieComponent } from './components/Movie';\nimport { Paginator } from './components/Paginator';\nimport { SearchBar } from './components/SearchBar';\n\nimport { SearchResponse, Type, Movie } from './data/OMDBTypes';\n\nimport './App.css';\nimport { Banner } from './components/Banner';\n\n// OMDB constants\nconst API_KEY = 'e287055f';\nconst RESULTS_PER_PAGE = 10;\n\nconst MAX_NOMINEES = 5;\n\n/**\n * Requests OMDB for movie details given its title. Undefined is returned if no movies with given title was found.\n *\n * @param title of movie\n * @param page with current title to look for. 1-indexed.\n * @returns a SearchResponse (contains a list of titles, posters, and total number of results)\n */\nasync function search(title: string, page: number): Promise<SearchResponse | undefined> {\n    let resp: SearchResponse = await axios.get('https://www.omdbapi.com', {\n        params: {\n            apikey: API_KEY,\n            s: title,\n            type: Type.Movie,\n            page,\n        },\n    });\n\n    if ('Error' in resp.data) {\n        return undefined;\n    }\n\n    return resp;\n}\n\nfunction App() {\n    const [currentPage, setCurrentPage] = useState(1);\n    const [nominees, setNominees] = useState<Movie[]>([]);\n    const [lastSearch, setLastSearch] = useState<SearchResponse | undefined>(undefined);\n    const [isBannerVisible, setBannerVisibility] = useState(false);\n\n    useEffect(() => {\n        if (nominees.length === MAX_NOMINEES) {\n            setBannerVisibility(true);\n        }\n    }, [setBannerVisibility, nominees]);\n\n    return (\n        <div className=\"App\">\n            <Banner display={isBannerVisible}>\n                <h2 className=\"text-5xl mt-4 mb-8 font-bold text-green-800\">Here are your nominees!</h2>\n                <p>\n                    You have nominated the following 5 movies! Please double check your nominees below and choose <i>Cancel</i> or{' '}\n                    <i>Submit</i>\n                </p>\n                <div className=\"FinalNominees grid grid-cols-2 lg:grid-cols-5 gap-4 m-4\">\n                    {nominees.map((movie) => (\n                        <MovieComponent key={movie.imdbID} movieData={movie} />\n                    ))}\n                </div>\n                <div className=\"flex flex-row justify-center\">\n                    <button\n                        className=\"bg-red-600 hover:bg-red-500 text-white px-4 py-2 m-2 rounded shadow-sm hover:shadow-md transition-all\"\n                        onClick={(_) => {\n                            setBannerVisibility(false);\n                        }}\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        className=\"bg-green-600 hover:bg-green-500 text-white px-4 py-2 m-2 rounded shadow-sm hover:shadow-md transition-all\"\n                        onClick={(_) => {\n                            window.location.reload(); // Dummy implementation, this should post the result to an endpoint\n                        }}\n                    >\n                        Submit\n                    </button>\n                </div>\n            </Banner>\n\n            <div className=\"container lg:md mx-auto mb-16\">\n                <h1 className=\"text-5xl pt-16 pb-8 font-bold text-green-800\">The Shoppies 🏆</h1>\n                <h4 className=\"text-lg mt-2 mb-4 text-gray-600\">Nominate your favourite movies for the Shoppies!</h4>\n                <p className=\"text-gray-600\">\n                    You can nominate {MAX_NOMINEES} movies using our search engine below. You can also modify your nominees in the{' '}\n                    <i>My nominees</i> section\n                </p>\n\n                <h2 className=\"text-4xl text-green-600 mt-8 mb-6 font-medium\">Search</h2>\n                <SearchBar\n                    onEnter={async (title) => {\n                        // If the user enters a new search always default to page 1 (because a page 2 for the new title may not exist)\n                        setCurrentPage(1);\n                        setLastSearch(await search(title, 1));\n                    }}\n                />\n                {lastSearch !== undefined && (\n                    <>\n                        <div className=\"SearchResults grid grid-cols-2 lg:grid-cols-5 gap-4\">\n                            {lastSearch.data.Search !== undefined &&\n                                lastSearch.data.Search.map((movie) => (\n                                    <MovieComponent key={movie.imdbID} movieData={movie}>\n                                        <button\n                                            className=\"bg-green-600 hover:bg-green-500 text-white px-4 py-2 m-2 rounded shadow-sm hover:shadow-md transition-all disabled:opacity-50 disabled:bg-green-600 disabled:cursor-not-allowed\"\n                                            disabled={nominees.findIndex((nominee) => nominee.imdbID === movie.imdbID) >= 0}\n                                            onClick={(_) => nominees.length < MAX_NOMINEES && setNominees([...nominees, movie])}\n                                        >\n                                            Nominate\n                                        </button>\n                                    </MovieComponent>\n                                ))}\n                        </div>\n\n                        <Paginator\n                            onChangePage={async (page) => {\n                                setCurrentPage(page);\n                                setLastSearch(await search(lastSearch.config.params.s, page));\n                            }}\n                            numPages={Math.round(+lastSearch.data.totalResults / RESULTS_PER_PAGE)}\n                            currentPage={currentPage}\n                        />\n                    </>\n                )}\n                {lastSearch === undefined && <p>Sorry we could not find any movies with the given title</p>}\n\n                <h2 className=\"text-4xl text-green-600 mt-8 mb-6 font-medium\">My nominees</h2>\n                {nominees.length === 0 && <p>You have not nominated any movies</p>}\n                <div className=\"Nominees grid grid-cols-2 lg:grid-cols-5 gap-4\">\n                    {nominees.map((movie) => (\n                        <MovieComponent key={movie.imdbID} movieData={movie}>\n                            <button\n                                className=\"bg-red-600 hover:bg-red-500 text-white px-4 py-2 m-2 rounded shadow-sm hover:shadow-md transition-all\"\n                                onClick={(_) => {\n                                    setNominees(nominees.filter((nominee) => nominee.imdbID !== movie.imdbID));\n                                }}\n                            >\n                                Remove\n                            </button>\n                        </MovieComponent>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}